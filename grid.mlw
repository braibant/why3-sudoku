
theory Grid

  use import int.Int
  use export map.Map

  type grid = map int int

  (* a "chunk" is either a column, a row or a square.

   a chunk is defined by a starting index s and a set of 9 offsets
   {o0,..,o8}, that thus denotes a set of 9 cells {s+o0,..,s+o8} in a
   grid.

   Each cell of the grid belongs to 3 chunks, one of each kind.  For
   each cell index, there is a unique starting index resepectively for
   the column, the row and the square it belongs to.

  *)

  constant column_start : map int int =
     (const (-1))
     [ 0<-0][ 1<-1][ 2<-2][ 3<-3][ 4<-4][ 5<-5][ 6<-6][ 7<-7][ 8<-8]
     [ 9<-0][10<-1][11<-2][12<-3][13<-4][14<-5][15<-6][16<-7][17<-8]
     [18<-0][19<-1][20<-2][21<-3][22<-4][23<-5][24<-6][25<-7][26<-8]
     [27<-0][28<-1][29<-2][30<-3][31<-4][32<-5][33<-6][34<-7][35<-8]
     [36<-0][37<-1][38<-2][39<-3][40<-4][41<-5][42<-6][43<-7][44<-8]
     [45<-0][46<-1][47<-2][48<-3][49<-4][50<-5][51<-6][52<-7][53<-8]
     [54<-0][55<-1][56<-2][57<-3][58<-4][59<-5][60<-6][61<-7][62<-8]
     [63<-0][64<-1][65<-2][66<-3][67<-4][68<-5][69<-6][70<-7][71<-8]
     [72<-0][73<-1][74<-2][75<-3][76<-4][77<-5][78<-6][79<-7][80<-8]

  constant column_offsets : map int int =
     (const (-1))
     [ 0<-0][ 1<-9][ 2<-18][ 3<-27][ 4<-36][ 5<-45][ 6<-54][ 7<-63][ 8<-72]

  constant row_start : map int int =
     (const (-1))
     [ 0<- 0][ 1<- 0][ 2<- 0][ 3<- 0][ 4<- 0][ 5<- 0][ 6<- 0][ 7<- 0][ 8<- 0]
     [ 9<- 9][10<- 9][11<- 9][12<- 9][13<- 9][14<- 9][15<- 9][16<- 9][17<- 9]
     [18<-18][19<-18][20<-18][21<-18][22<-18][23<-18][24<-18][25<-18][26<-18]
     [27<-27][28<-27][29<-27][30<-27][31<-27][32<-27][33<-27][34<-27][35<-27]
     [36<-36][37<-36][38<-36][39<-36][40<-36][41<-36][42<-36][43<-36][44<-36]
     [45<-45][46<-45][47<-45][48<-45][49<-45][50<-45][51<-45][52<-45][53<-45]
     [54<-54][55<-54][56<-54][57<-54][58<-54][59<-54][60<-54][61<-54][62<-54]
     [63<-63][64<-63][65<-63][66<-63][67<-63][68<-63][69<-63][70<-63][71<-63]
     [72<-72][73<-72][74<-72][75<-72][76<-72][77<-72][78<-72][79<-72][80<-72]

  constant row_offsets : map int int =
     (const (-1))
     [ 0<-0][ 1<-1][ 2<-2][ 3<-3][ 4<-4][ 5<-5][ 6<-6][ 7<-7][ 8<-8]

  constant square_start : map int int =
     (const (-1))
     [ 0<- 0][ 1<- 0][ 2<- 0][ 3<- 3][ 4<- 3][ 5<- 3][ 6<- 6][ 7<- 6][ 8<- 6]
     [ 9<- 0][10<- 0][11<- 0][12<- 3][13<- 3][14<- 3][15<- 6][16<- 6][17<- 6]
     [18<- 0][19<- 0][20<- 0][21<- 3][22<- 3][23<- 3][24<- 6][25<- 6][26<- 6]
     [27<-27][28<-27][29<-27][30<-30][31<-30][32<-30][33<-33][34<-33][35<-33]
     [36<-27][37<-27][38<-27][39<-30][40<-30][41<-30][42<-33][43<-33][44<-33]
     [45<-27][46<-27][47<-27][48<-30][49<-30][50<-30][51<-33][52<-33][53<-33]
     [54<-54][55<-54][56<-54][57<-57][58<-57][59<-57][60<-60][61<-60][62<-60]
     [63<-54][64<-54][65<-54][66<-57][67<-57][68<-57][69<-60][70<-60][71<-60]
     [72<-54][73<-54][74<-54][75<-57][76<-57][77<-57][78<-60][79<-60][80<-60]

  constant square_offsets : map int int =
     (const (-1))
     [ 0<-0][ 1<-1][ 2<-2][ 3<-9][ 4<-10][ 5<-11][ 6<-18][ 7<-19][ 8<-20]

  (* (valid_chunk g i start offsets) is true whenever the chunk
  denoted by (start,offsets) where i belongs to is "valid" in grid, in
  the sense that it contains at most one occurence of each number
  between 1 and 9 *)

  predicate valid_chunk (g:grid) (i:int)
    (start:map int int) (offsets:map int int) =
    let s = start[i] in
    forall o1 o2 : int. 0 <= o1 < 9 /\ 0 <= o2 < 9 /\ o1 <> o2 ->
      let i1 = s + offsets[o1] in
      let i2 = s + offsets[o2] in
      1 <= g[i1] <= 9 /\ 1 <= g[i2] <= 9 -> g[i1] <> g[i2]

  predicate valid_column (g:grid) (i:int) =
    valid_chunk g i column_start column_offsets

  predicate valid_row (g:grid) (i:int) =
    valid_chunk g i row_start row_offsets

  predicate valid_square (g:grid) (i:int) =
    valid_chunk g i square_start square_offsets

  predicate is_index (i:int) = 0 <= i < 81

  predicate valid (g : grid) =
    forall i : int. is_index i ->
      valid_column g i /\ valid_row g i /\ valid_square g i

  predicate full (g : grid) =
    forall i : int. is_index i -> 1 <= g[i] <= 9

  predicate included (g1 g2 : grid) =
    forall i : int. is_index i /\ 1 <= g1[i] <= 9 -> g2[i] = g1[i]

  predicate is_solution_for (sol:grid) (data:grid) =
    included data sol /\ full sol /\ valid sol

end

