module Solve 
       use import grid.Grid
       use import ref.Ref 
       use import bool.Bool
       use import int.Int
       
       exception Invalid

       predicate distinct_pair (g: grid) (s: int) (offsets: map int int) (o1:int) (o2:int) 
       =
       let i1 = s + offsets[o1] in 
       let i2 = s + offsets[o2] in
       o1 <> o2 -> 
       1 <= g[i1] <= 9 /\ 1 <= g[i2] <= 9 -> 
       g[i1] <> g[i2]

       (* distinct pairs up to o1 and o2 *)
       predicate distinct_pairs (g: grid) (s: int) (offsets: map int int) (o1:int) (o2:int) =
       forall a b: int. 
       0 <= a < o1 /\ 0 <= b < o2 -> 
       distinct_pair g s offsets a b
       
       lemma distinct_pairs_to_valid_chunk: forall g:grid, i:int, start: map int int, 
       offsets: map int int. 
       distinct_pairs g (start[i]) offsets 9 9 -> 
       valid_chunk g i start offsets

       (*
       let valid_chunk (g: grid) (i:int) (start: map int int) (offsets: map int int) : bool
       ensures  {result = True -> valid_chunk g i start offsets }
        = 
       let s = start[i] in       
       try 
       for o1 = 0 to 8 do
       invariant {distinct_pairs g s offsets o1 9}
       	   for o2 = 0 to 8 do
	   invariant {distinct_pairs g s offsets (1 + o1) o2}
	   if g[s +offsets[o1]] = g[s + offsets[o2]]
	   then raise Invalid
	   done
       done;
       True
       with 
       | Invalid -> False
       end
       *)

       use array.Array 

       predicate is_grid (g: grid) =
       forall k : int. 1 <= g[k] <= 9 \/ g[k] = -1
       
       (* Section 1: efficient check of the validity of a chunk *)
  
       let valid_chunk (g: grid) (i:int) (start: map int int) (offsets: map int int) : bool
       requires {is_grid g}
       ensures  {result = True -> valid_chunk g i start offsets }
        = 
       let s = start[i] in       
       let b = Array.make 9 False in 
       try 
       for o = 0 to 8 do
       invariant {distinct_pairs g s offsets o o}
       invariant {forall o':int. 0 <= o' < o -> g[s+offsets[o']] <> -1 -> Array.get b (g[s+offsets[o']] - 1) = True} 
           let n = g[s + offsets[o]] in 
           if n <> -1 then 
           begin 
                 if Array.([]) b (n-1) then raise Invalid;
                 Array.([]<-) b (n-1) True
           end          
       done;       
       True
       with 
       | Invalid -> False
       end
       
       let valid_column g i : bool        
       requires {is_grid g}
       ensures {result = True -> valid_column g i}= 
       valid_chunk g i column_start column_offsets

       let valid_row g i : bool 
       requires {is_grid g}
       ensures {result = True -> valid_row g i} = 
       valid_chunk g i row_start row_offsets 

       let valid_square g i : bool 
       requires {is_grid g}
       ensures {result = True -> valid_square g i}= 
       valid_chunk g i square_start square_offsets 

       let valid_grid (g: grid) 
       requires {is_grid g}
       ensures {result = True -> valid g} =
       try
       for i = 0 to 80 do
       invariant {forall j:int. 0 <= j < i -> 
                  valid_column g j /\ valid_row g j /\ valid_square g j
		  }
       if not (valid_column g i && valid_row g i && valid_square g i)
       then raise Invalid
       done;
       True
       with 
       | Invalid -> False
       end
       
       (* Section 2: checking that an update is valid *)

       lemma valid_chunk_ex:
       forall g g': grid, i: int, start: map int int, offsets: map int int.
       valid_chunk g i start offsets  -> 
       (forall o: int. 0 <= o < 9 -> g'[start[i] + offsets[o]] = g[start[i] + offsets[o]]) ->
       valid_chunk g' i start offsets 

       predicate wf_maps (start:map int int) (offsets:map int int)  = 
       forall i j: int.
       0 <= i < 81 /\ 0 <= j < 81 ->
       start[i] <> start[j] -> 
       (forall o: int. 0 <= o < 9 -> (start[j] + offsets[o] <> i))       

       lemma wf_maps_column : wf_maps column_start column_offsets
       lemma wf_maps_square : wf_maps square_start square_offsets
       lemma wf_maps_row    : wf_maps row_start    row_offsets

       lemma valid_chunk_ex2:
       forall g: grid, i j x: int, start: map int int, offsets: map int int.
       is_index i /\ is_index j ->
       valid_chunk g j start offsets  ->
       wf_maps start offsets ->
       start[i] <> start[j] ->
       valid_chunk g[i <- x] j start offsets       

       (* the property of not being in the same equivalence class *)
       predicate diff (i j: int) =
          square_start[i] <> square_start[j]
       && column_start[i] <> column_start[j]
       && row_start[i] <> row_start[j]


       (* This lemma can be proved in coq *)
       lemma valid_chunk_start_invariant: forall g:grid, start:map int int, offsets:map int int.
       forall i j: int.
       valid_chunk g i start offsets ->
       start[i] = start[j] ->
       valid_chunk g j start offsets

       lemma valid_chunk_update_square:
       forall g: grid, i j x: int.
       is_index i /\ is_index j ->
       valid_square g j ->
       square_start[i] <> square_start[j] ->
       valid_square g[i <- x] j

       lemma valid_chunk_update_column:
       forall g: grid, i j x: int.
       is_index i /\ is_index j ->
       valid_column g j ->
       column_start[i] <> column_start[j] ->
       valid_column g[i <- x] j

       lemma valid_chunk_update_row:
       forall g: grid, i j x: int.
       is_index i /\ is_index j ->
       valid_row g j ->
       row_start[i] <> row_start[j] ->
       valid_row g[i <- x] j
       
       (* updating a cell does not invalidate the cell in other equivalence classes *)
       lemma valid_chunk_update_preserve: forall g:grid, i j x :int.
       is_index i /\ is_index j ->
       valid_column g j && valid_row g j && valid_square g j -> 
       diff i j ->
       valid_column g[i <- x] j && valid_row g[i <- x] j && valid_square g[i <- x] j

       (* updating a cell, we potentially invalidate at most its row,
       its column or its square. That is, the validity of other chunks
       is preserved. *)              	      	      
       let valid_update (g: grid) (i: int) (x: int) : bool
       requires {is_grid g}
       requires {valid g}
       requires {1 <= x <= 9}
       requires {is_index i}
       ensures  {result = True -> valid (g[i<-x])}        
       =
       assert {forall j: int. is_index j -> valid_column g j && valid_row g j && valid_column g j};
       let g' = g[i <- x] in 
       assert {forall j: int. is_index j -> diff i j -> valid_column g' j && valid_row g' j && valid_column g' j};
       valid_column g' i && valid_row g' i && valid_square g' i       
       
       (* Section 3: solving the sudoku grid  *)
       
       (* a grid [g] is partially filled up to [i] *)
       predicate partial (g:grid) (i:int) =
       (forall k: int. 0 <= k < i -> 1 <= g[k] <= 9)
       /\ (forall k : int. is_index k -> 1 <= g[k] <= 9 \/ g[k] = -1)
       
       lemma partial_1 : forall g:grid, i:int. 
       i < 81 -> 
       partial g i -> 
       g[i] <> -1 -> 
       partial g (i+1) 
       
       use import option.Option

       exception Found 
       let solve (g0:grid) (i:int) : option grid 
       requires {valid g0}
       requires {is_grid g0}
       requires {partial g0 0}
       ensures {forall g': grid. result = Some g' -> is_solution_for g' g0}
       =
       	   let g = ref g0 in 
       	   let rec solve (i:int) : bool
	   requires {0 <= i <= 81}
	   requires {is_grid !g}
	   requires {valid !g}
	   requires {partial !g i}
	   requires {included g0 !g}
	   ensures  {result = True -> valid !g /\ included g0 !g /\ full !g}
	   ensures  {result = False -> !g = old !g}
	   variant {81 - i}
	   = 
	   if i = 81 
	   then True
	   else if !g[i] <> -1 then solve (i+1)
	   else	try 
			let ghost g_old = !g in 
	   	   	for x = 1 to 9 do 
			invariant {valid !g /\ included g0 !g /\ partial !g i}
			invariant {is_grid !g}		
			invariant {!g = g_old}
			if valid_update !g i x 
			then begin g := !g[i <- x]; 
			     	   if solve (i+1)
				   then raise Found
				   else begin g := (!g)[i<- -1] end
			     end
			done;
			False
		with Found -> True end
	   in 
	   if solve 0 then Some !g else None

   
           
end

(*
Local Variables:
compile-command: "why3 -L ./ sudoku.mlw"	
End:
*)
		
		   